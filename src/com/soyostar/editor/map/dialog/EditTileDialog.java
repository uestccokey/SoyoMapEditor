/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TileSetCrossDialog.java
 *
 * Created on 2011-5-31, 23:37:26
 */
package com.soyostar.editor.map.dialog;

import com.soyostar.editor.map.main.AppData;
import com.soyostar.editor.map.model.MapTile;
import com.soyostar.editor.map.model.TileSet;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class EditTileDialog extends javax.swing.JDialog {

    /** Creates new form TileSetCrossDialog
     * @param parent
     * @param modal  
     */
    public EditTileDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        Iterator iter1 = AppData.getInstance().getCurProject().getMaps().entrySet().iterator();
        while (iter1.hasNext()) {
            Map.Entry entry = (Map.Entry) iter1.next();
            Object val = entry.getValue();
            if (val != null && val instanceof com.soyostar.editor.map.model.Map) {
                com.soyostar.editor.map.model.Map map = (com.soyostar.editor.map.model.Map) val;
                for (int i = 0; i < map.getTotalTileSets(); i++) {
                    TileSet ts = map.getTileSet(i);
                    tilesets.add(ts);
                    listModel.addElement(ts.getName());
                }
            }
        }
        initComponents();
        initialize();
    }

    private void initialize() {
        setLocationRelativeTo(null);
    }
    private DefaultListModel listModel = new DefaultListModel();
    private ArrayList<TileSet> tilesets = new ArrayList<TileSet>();
    private MapTile selectTile;

    private void setTile(MapTile tile) {
        selectTile = tile;
        //先缓存
        HashMap<String, String> propertys = new HashMap<String, String>();
        Iterator iter0 = selectTile.getProperties().entrySet().iterator();
        while (iter0.hasNext()) {
            Map.Entry entry = (Map.Entry) iter0.next();
            Object key = entry.getKey();
            Object val = entry.getValue();
            propertys.put(key.toString(), val.toString());
        }
        //再删除table中的数据
        for (int i = 0, n = tilePropertyTable.getRowCount(); i < n; i++) {
            ((DefaultTableModel) tilePropertyTable.getModel()).removeRow(0);
        }
        //然后再把缓存数据还原
        Iterator iter1 = propertys.entrySet().iterator();
        while (iter1.hasNext()) {
            Map.Entry entry = (Map.Entry) iter1.next();
            Object key = entry.getKey();
            Object val = entry.getValue();
            selectTile.addProperty(key.toString(), val.toString());
        }
        //把新数据放入table
        Iterator iter = propertys.entrySet().iterator();
        while (iter.hasNext()) {
            Map.Entry entry = (Map.Entry) iter.next();
            Object key = entry.getKey();
            Object val = entry.getValue();
            ((DefaultTableModel) tilePropertyTable.getModel()).addRow(new String[]{key.toString(), val.toString()});
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        setTileButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        addTilePropertyButton = new javax.swing.JButton();
        removeTilePropertyButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tilePropertyTable = new javax.swing.JTable();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tileSetList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tileSetPanel = new javax.swing.JPanel(){
            public void paint(Graphics g){
                paintTileSetPane(g);
            }
            public Dimension getPreferredSize(){
                if(tileSetList.getSelectedIndex()!=-1){
                    if(tilesets.get(tileSetList.getSelectedIndex())!=null){
                        return new Dimension(tilesets.get(tileSetList.getSelectedIndex()).getTileSetImage().getWidth(null)
                            ,tilesets.get(tileSetList.getSelectedIndex()).getTileSetImage().getHeight(null));
                    }
                }
                return new Dimension(0,0);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(EditTileDialog.class);
        setTitle(resourceMap.getString("title")); // NOI18N

        okButton.setText("确定");
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        setTileButton.setText("设置");
        setTileButton.setName("setTileButton"); // NOI18N
        setTileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTileButtonActionPerformed(evt);
            }
        });

        jPanel1.setName("jPanel1"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.JToolBar.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        addTilePropertyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/gnome-new.png"))); // NOI18N
        addTilePropertyButton.setFocusable(false);
        addTilePropertyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addTilePropertyButton.setName("addTilePropertyButton"); // NOI18N
        addTilePropertyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addTilePropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTilePropertyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addTilePropertyButton);

        removeTilePropertyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/gnome-delete.png"))); // NOI18N
        removeTilePropertyButton.setFocusable(false);
        removeTilePropertyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeTilePropertyButton.setName("removeTilePropertyButton"); // NOI18N
        removeTilePropertyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeTilePropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTilePropertyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeTilePropertyButton);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tilePropertyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "瓷砖属性", "值"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tilePropertyTable.getModel().addTableModelListener(new TableModelListener()
            {
                @Override
                public void tableChanged(TableModelEvent e)
                {
                    selectTile.removeAllProperty();
                    for (int i = 0; i < tilePropertyTable.getRowCount(); i++) {
                        selectTile.addProperty(tilePropertyTable.getModel().getValueAt(i, 0).toString(), tilePropertyTable.getModel().getValueAt(i, 1).toString());
                    }
                }
            });
            tilePropertyTable.setName("tilePropertyTable"); // NOI18N
            jScrollPane3.setViewportView(tilePropertyTable);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
            );

            jSplitPane1.setName("jSplitPane1"); // NOI18N
            jSplitPane1.setOneTouchExpandable(true);

            jScrollPane1.setName("jScrollPane1"); // NOI18N

            tileSetList.setModel(listModel);
            tileSetList.setName("tileSetList"); // NOI18N
            tileSetList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                    tileSetListValueChanged(evt);
                }
            });
            jScrollPane1.setViewportView(tileSetList);

            jSplitPane1.setLeftComponent(jScrollPane1);

            jScrollPane2.setName("jScrollPane2"); // NOI18N

            tileSetPanel.setName("tileSetPanel"); // NOI18N
            tileSetPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    tileSetPanelMousePressed(evt);
                }
            });

            javax.swing.GroupLayout tileSetPanelLayout = new javax.swing.GroupLayout(tileSetPanel);
            tileSetPanel.setLayout(tileSetPanelLayout);
            tileSetPanelLayout.setHorizontalGroup(
                tileSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 243, Short.MAX_VALUE)
            );
            tileSetPanelLayout.setVerticalGroup(
                tileSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 289, Short.MAX_VALUE)
            );

            jScrollPane2.setViewportView(tileSetPanel);

            jSplitPane1.setRightComponent(jScrollPane2);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(setTileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 223, Short.MAX_VALUE)
                            .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(setTileButton)
                        .addComponent(okButton))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void tileSetListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tileSetListValueChanged
        // TODO add your handling code here:
        TileSet tileset = tilesets.get(tileSetList.getSelectedIndex());
        if (!tileset.generateGaplessArrayList().isEmpty()) {
            setTile(tileset.generateGaplessArrayList().get(0));
        }
        tileSetPanel.updateUI();
    }//GEN-LAST:event_tileSetListValueChanged
    private void paintTileSetPane(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fillRect(0, 0, tileSetPanel.getWidth(), tileSetPanel.getHeight());
        if (tileSetList.getSelectedIndex() != -1) {
            TileSet tileset = tilesets.get(tileSetList.getSelectedIndex());
            BufferedImage img = tileset.getTileSetImage();
            if (img != null) {
                g2d.setColor(Color.WHITE);
                g2d.fillRect(0, 0, img.getWidth(null), img.getHeight(null));
                g2d.drawImage(img, 0, 0, null);
                g2d.setColor(Color.DARK_GRAY);
                g2d.setComposite(AlphaComposite.getInstance(
                        AlphaComposite.SRC_ATOP, 0.5f));
                g2d.setStroke(new BasicStroke(2.0F, BasicStroke.CAP_BUTT,
                        BasicStroke.JOIN_MITER));
                for (int i = 0; i < img.getWidth(null) / bound.width; i++) {
                    g2d.drawLine(i * bound.width, 0, i * bound.width, img.getHeight(null));
                }
                for (int j = 0; j < img.getHeight(null) / bound.height; j++) {
                    g2d.drawLine(0, j * bound.height, img.getWidth(null), j * bound.height);
                }
                g2d.setColor(Color.BLACK.brighter());
                g2d.setRenderingHint(
                        RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
                int tilesPerRow = tileset.getTilesPerRow();
                for (int i = 0; i < img.getWidth(null) / bound.width; i++) {
                    for (int j = 0; j < img.getHeight(null) / bound.height; j++) {
                        int tileAt = j * tilesPerRow + i;
                        if (tileAt < tileset.generateGaplessArrayList().size()) {
                            if (!tileset.generateGaplessArrayList().get(tileAt).getProperties().isEmpty()) {
                                g2d.drawOval(i * bound.width + 1, j * bound.height + 1, bound.width - 3, bound.height - 3);
                            }
                        }
                    }
                }
                g2d.setColor(Color.RED.brighter());
                g2d.setComposite(AlphaComposite.getInstance(
                        AlphaComposite.SRC_ATOP, 1f));
                if (selectTile != null) {
                    g2d.draw3DRect(selectPoint.x * selectTile.getWidth() + 1, selectPoint.y * selectTile.getHeight() + 1, selectTile.getWidth() - 3, selectTile.getHeight() - 3, false);
                }
            }
        }
    }
    private Point selectPoint = new Point();
    private void tileSetPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileSetPanelMousePressed
        // TODO add your handling code here:
        if (tileSetList.getSelectedIndex() != -1) {
            TileSet tileset = tilesets.get(tileSetList.getSelectedIndex());
            int tilesPerRow = tileset.getTilesPerRow();
            int twidth = tileset.getTileWidth();
            int theight = tileset.getTileHeight();
            int tileCount = tileset.generateGaplessArrayList().size();
            int rows = tileCount / tilesPerRow
                    + (tileCount % tilesPerRow > 0 ? 1 : 0);
            int tileX = Math.max(0, Math.min(evt.getX() / twidth, tilesPerRow - 1));
            int tileY = Math.max(0, Math.min(evt.getY() / theight, rows - 1));
            selectPoint.x = tileX;
            selectPoint.y = tileY;
            int tileAt = tileY * tilesPerRow + tileX;
            if (tileAt < tileset.generateGaplessArrayList().size()) {
                if (tileset.generateGaplessArrayList().get(tileAt) != selectTile) {
                    setTile(tileset.generateGaplessArrayList().get(tileAt));
                }
            }
        }
        tileSetPanel.repaint();
    }//GEN-LAST:event_tileSetPanelMousePressed
    private SetTileSizeDialog stsd;
    private void setTileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTileButtonActionPerformed
        // TODO add your handling code here:
        if (stsd == null) {
            stsd = new SetTileSizeDialog(this, true);
        }
        stsd.setVisible(true);
    }//GEN-LAST:event_setTileButtonActionPerformed

    private void addTilePropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTilePropertyButtonActionPerformed
        // TODO add your handling code here:
        ((DefaultTableModel) tilePropertyTable.getModel()).addRow(new String[]{"", ""});
    }//GEN-LAST:event_addTilePropertyButtonActionPerformed

    private void removeTilePropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTilePropertyButtonActionPerformed
        // TODO add your handling code here:
        if (tilePropertyTable.getSelectedRow() != -1) {
            ((DefaultTableModel) tilePropertyTable.getModel()).removeRow(tilePropertyTable.getSelectedRow());
        }
    }//GEN-LAST:event_removeTilePropertyButtonActionPerformed
    private Rectangle bound = new Rectangle(32, 32);//单元格的大小 默认32*32
    //初始化通行度设置
//
//    /**
//     *
//     * @param filename
//     * @param rec
//     * @return
//     */
//    public Picture initCrossFile(String filename, Rectangle rec) {
//        if (!new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar
//                + "softdata" + File.separatorChar + "tileset" + File.separatorChar + filename + rec.width + "x" + rec.height).exists()) {
//            return null;
//        }
//        try {
//            DataInputStream dis = null;
//            FileInputStream fis = null;
//            fis = new FileInputStream(AppData.getInstance().getCurProject().getPath() + File.separatorChar
//                    + "softdata" + File.separatorChar + "tileset" + File.separatorChar + filename + rec.width + "x" + rec.height);
//            dis = new DataInputStream(fis);
//            Picture pic = new Picture();
//            pic.imgFileName = dis.readUTF();
//            pic.img = ImageIO.read(new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar
//                    + "image" + File.separatorChar + "tileset" + File.separatorChar + pic.imgFileName));
//            int w = dis.readInt();
//            int h = dis.readInt();
//            pic.collides = new boolean[pic.img.getWidth(null) / w][pic.img.getHeight(null) / h];
////            pic.ca = new CollideArray(pic.img.getWidth(null) / w, pic.img.getHeight(null) / h);
//            for (int i = 0; i < pic.collides.length; i++) {
//                for (int j = 0; j < pic.collides[0].length; j++) {
//                    pic.collides[i][j] = dis.readBoolean();
//                }
//            }
//            return pic;
//        } catch (Exception ex) {
//            Logger.getLogger(EditTileDialog.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return null;
//    }
//    //保存通行度
//
//    private void saveCrossFile(Picture pic, String filename) throws Exception {
//        FileOutputStream fos = null;
//        DataOutputStream dos = null;
//        System.out.println();
//        File file = new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar
//                + "softdata" + File.separatorChar + "tileset" + File.separatorChar + filename + bound.width + "x" + bound.height);
//        fos = new FileOutputStream(file);
//        dos = new DataOutputStream(fos);
//        //写入图片文件名
//        dos.writeUTF(pic.imgFileName);
//        //写入当前单元格宽度
//        dos.writeInt(bound.width);
//        //写入当前单元格高度
//        dos.writeInt(bound.height);
//        //写入通行度设置
//        for (int i = 0; i < pic.collides.length; i++) {
//            for (int j = 0; j < pic.collides[0].length; j++) {
//                dos.writeBoolean(pic.collides[i][j]);
//            }
//        }
//        dos.close();
//        fos.close();
//    }

    /**
     * 
     * @return
     */
    public Rectangle getBound() {
        return bound;
    }

    /**
     * 
     * @param r
     */
    public void setBound(Rectangle r) {
//        ArrayList<Picture> imgs = new ArrayList<Picture>();
//        for (int i = 0; i < images.size(); i++) {
//            Picture pic = images.get(i);
//            try {
//                saveCrossFile(pic, pic.imgFileName);
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//        }
        bound = r;
//        for (int i = 0; i < images.size(); i++) {
//            Picture pic = new Picture();
//            pic.imgFileName = images.get(i).imgFileName;
//            Picture initPic;
//            initPic = initCrossFile(pic.imgFileName, bound);
//            if (initPic == null) {
//                pic.img = images.get(i).img;
//                pic.collides = new boolean[pic.img.getWidth(null) / bound.width][pic.img.getHeight(null) / bound.height];
//            } else {
//                pic = initPic;
//            }
//            imgs.add(pic);
//        }
//        images = imgs;
        tileSetPanel.repaint();
//        System.out.println("w:" + r.width);
//        System.out.println("h:" + r.height);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                EditTileDialog dialog = new EditTileDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTilePropertyButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeTilePropertyButton;
    private javax.swing.JButton setTileButton;
    private javax.swing.JTable tilePropertyTable;
    private javax.swing.JList tileSetList;
    private javax.swing.JPanel tileSetPanel;
    // End of variables declaration//GEN-END:variables
}
