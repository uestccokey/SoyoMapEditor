/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MiniMapPane.java
 *
 * Created on 2011-10-6, 0:23:33
 */
package com.soyostar.editor.map.ui.widget;

import com.soyostar.editor.map.main.AppData;
import com.soyostar.editor.map.model.Layer;
import com.soyostar.editor.map.model.Map;
import com.soyostar.editor.map.model.MapObject;
import com.soyostar.editor.map.model.MapTile;
import com.soyostar.editor.map.model.ObjectLayer;
import com.soyostar.editor.map.model.TileLayer;
import com.soyostar.editor.map.ui.render.MapRender;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.Iterator;

/**
 *
 * @author Administrator
 */
public class MiniMapPane extends javax.swing.JPanel {

    /** Creates new form MiniMapPane */
    public MiniMapPane() {
        initComponents();
    }
    private AppData data = AppData.getInstance();
    private Point point = new Point();

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(AppData.MINI_MAP_W, AppData.MINI_MAP_H);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(192, 192));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        point.x = evt.getX();
        point.y = evt.getY();
        //repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        int ox = evt.getX() - point.x;
        int oy = evt.getY() - point.y;
        point.x = evt.getX();
        point.y = evt.getY();
//        System.out.println("ox:" + ox);
//        System.out.println("oy:" + oy);
        Rectangle viewArea = data.getMainFrame().mapScrollPane.getViewport().getViewRect();
        Map map = data.getCurrentMap();
        if (map != null) {
            float mapW = (map.getTileWidth() * map.getWidth());
            float mapH = (map.getTileHeight() * map.getHeight());
//            int vx = 0, vy = 0, vw = 0, vh = 0;
            float xs = 0.0f, ys = 0.0f, scale = 1.0f;
            if (mapW >= mapH) {
                scale = mapH / mapW;
                xs = this.getWidth() * 1.0f / (map.getTileWidth() * map.getWidth());//x方向上的放缩
                ys = this.getHeight() * scale / (map.getTileHeight() * map.getHeight());//y方向上的放缩
            } else {
                scale = mapW / mapH;
                xs = this.getWidth() * scale / (map.getTileWidth() * map.getWidth());//x方向上的放缩
                ys = this.getHeight() * 1.0f / (map.getTileHeight() * map.getHeight());//y方向上的放缩
            }
            viewArea.x += ox / xs;
            viewArea.y += oy / ys;
            if (viewArea.x < 0) {
                viewArea.x = 0;
            }
            if (viewArea.y < 0) {
                viewArea.y = 0;
            }
            if (viewArea.x + viewArea.width > (map.getTileWidth() * map.getWidth())) {
                viewArea.x = (map.getTileWidth() * map.getWidth()) - viewArea.width;
            }
            if (viewArea.y + viewArea.height > (map.getTileHeight() * map.getHeight())) {
                viewArea.y = (map.getTileHeight() * map.getHeight()) - viewArea.height;
            }
            if (viewArea.x < 0) {
                viewArea.x = 0;
            }
            if (viewArea.y < 0) {
                viewArea.y = 0;
            }
            data.getMainFrame().mapScrollPane.getViewport().setViewPosition(new Point(viewArea.x, viewArea.y));
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseEntered

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, this.getWidth(), this.getHeight());
        Map map = data.getCurrentMap();
        if (map != null) {
            float mapW = (map.getTileWidth() * map.getWidth());
            float mapH = (map.getTileHeight() * map.getHeight());
            int vx = 0, vy = 0, vw = 0, vh = 0;
            float xs = 0.0f, ys = 0.0f;
            float scale = 1.0f;
            Rectangle viewArea = data.getMainFrame().mapScrollPane.getViewport().getViewRect();
            if (mapW >= mapH) {
                scale = mapH / mapW;
                xs = this.getWidth() * 1.0f / (map.getTileWidth() * map.getWidth());//x方向上的放缩
                ys = this.getHeight() * scale / (map.getTileHeight() * map.getHeight());//y方向上的放缩
                vx = (int) (viewArea.x * xs);
                vy = (int) (viewArea.y * ys);
                vw = (int) (viewArea.width * this.getWidth() / (map.getTileWidth() * map.getWidth()));
                vh = (int) (viewArea.height * this.getHeight() * scale / (map.getTileHeight() * map.getHeight()));
            } else {
                scale = mapW / mapH;
                xs = this.getWidth() * scale / (map.getTileWidth() * map.getWidth());//x方向上的放缩
                ys = this.getHeight() * 1.0f / (map.getTileHeight() * map.getHeight());//y方向上的放缩
                vx = (int) (viewArea.x * xs);
                vy = (int) (viewArea.y * ys);
                vw = (int) (viewArea.width * this.getWidth() * scale / (map.getTileWidth() * map.getWidth()));
                vh = (int) (viewArea.height * this.getHeight() / (map.getTileHeight() * map.getHeight()));
            }
            g2d.drawImage(map.getMapRender().getMiniMapImg(), 0, 0, null);
            g2d.setColor(Color.PINK);
            g2d.drawRect(vx,
                    vy,
                    vw,
                    vh);
            g2d.setColor(Color.CYAN);
            g2d.drawRect(vx + 1,
                    vy + 1,
                    vw,
                    vh);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
